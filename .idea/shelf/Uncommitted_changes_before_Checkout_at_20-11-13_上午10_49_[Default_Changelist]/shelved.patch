Index: app/src/main/java/com/example/llap_android/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.llap_android;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.RequiresApi;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.app.ActivityCompat;\n\nimport android.Manifest;\nimport android.app.Activity;\nimport android.content.Context;\nimport android.graphics.Color;\nimport android.hardware.camera2.CameraAccessException;\nimport android.media.Image;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.os.Environment;\nimport android.os.Handler;\nimport android.os.Message;\nimport android.os.SystemClock;\nimport android.view.View;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.io.OutputStream;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Locale;\nimport java.util.Objects;\n\nimport android.util.Log;\nimport android.widget.Button;\nimport android.widget.Toolbar;\nimport android.widget.ProgressBar;\nimport android.view.View.OnClickListener;\nimport android.media.AudioFormat;\nimport android.media.AudioRecord;\nimport android.media.AudioTrack;\nimport android.media.MediaRecorder;\nimport android.widget.TextView;\nimport android.os.Bundle;\n\nimport com.example.llap_android.Video.ImageAuxiliaries;\nimport com.example.llap_android.Video.StringLogger;\nimport com.example.llap_android.Video.VideoRecord;\n\nimport com.github.mikephil.charting.charts.LineChart;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private Button btnPlayRecord;\n\n    private Button btnStopRecord;\n\n    private TextView texDistance_x;\n\n    private TextView texDistance_y;\n\n\n    private TraceView mytrace;\n\n    private int recBufSize = 0;\n\n    private int frameSize = 512;\n\n    private double disx,disy;\n\n    private double displaydis=0;\n\n    private String sysname= \"llap\";\n\n    private AudioRecord audioRecord;\n\n\n    private double temperature =20;\n\n    private double freqinter = 350;\n\n    private int numfreq= 16;\n\n    private double[] wavefreqs=new double[numfreq];\n\n    private double[] wavelength=new double[numfreq];\n\n    private double[] phasechange= new double [numfreq*2];\n\n    private double[] freqpower= new double [numfreq*2];\n\n    private double[] dischange = new double [2];\n\n    private double[] idftdis = new double [2];\n\n    private double startfreq=15050;//17150\n\n    private double soundspeed = 0;\n\n    private int playBufSize;\n\n    private boolean sendDatatoMatlab =false;\n    private boolean sendbaseband = false;\n    private boolean logenabled = true;\n    /**\n     */\n    private boolean blnPlayRecord = false;\n\n    private int coscycle=1920;\n\n    /**\n     */\n    //private int sampleRateInHz = 44100;\n    private int sampleRateInHz = 48000;\n\n    /**\n     */\n    //private int channelConfig = AudioFormat.CHANNEL_CONFIGURATION_MONO;\n    private int channelConfig = AudioFormat.CHANNEL_IN_STEREO;\n\n    /**\n     */\n    private int encodingBitrate = AudioFormat.ENCODING_PCM_16BIT;\n\n    private int cicdec=16;\n    private int cicsec=3;\n    private int cicdelay=cicdec*17;\n\n\n    private double [] baseband=new double[2*numfreq*2*frameSize/cicdec];\n\n    private double [] baseband_nodc=new double[2*numfreq*2*frameSize/cicdec];\n\n    private short [] dcvalue=new short[4*numfreq];\n\n\n    private int [] trace_x=new int[1000];\n    private int [] trace_y=new int[1000];\n    private int tracecount=0;\n\n\n    private boolean isCalibrated=false;\n    private int now;\n    private int lastcalibration;\n\n    private double distrend=0.05;\n\n    private double micdis1=5;\n    private double micdis2=115;\n    private double dischangehist=0;\n\n    /**\n     */\n\n\n\n    private Socket datasocket;\n    private OutputStream datastream;\n\n    private ChartView mChartView;\n    private ChartView mPPGView;\n    private Activity mActivity;\n    private StringLogger mVLogger;\n    private StringLogger mDLogger;\n    private VideoRecord mRecord;\n    private Handler updateviews;\n    private ArduinoSerial mArduinoSerial;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE,Manifest.permission.READ_EXTERNAL_STORAGE,Manifest.permission.RECORD_AUDIO}, 1);\n        btnPlayRecord = (Button)findViewById(R.id.button);\n        btnStopRecord = (Button)findViewById(R.id.button2);\n        texDistance_x =(TextView) findViewById(R.id.textView);\n        texDistance_y =(TextView) findViewById(R.id.textView2);\n        mytrace = (TraceView) findViewById(R.id.trace);\n        soundspeed =331.3 + 0.606 *temperature;\n\n\n        for(int i=0;i<numfreq;i++)\n        {\n            wavefreqs[i]=startfreq+i*freqinter;\n            wavelength[i]=soundspeed/wavefreqs[i]*1000;\n        }\n        mActivity = this;\n\n        disx=0;\n        disy=250;\n        now=0;\n        lastcalibration=0;\n\n        tracecount=0;\n        mylog(\"initialization start at time: \" + System.currentTimeMillis());\n        mylog( AudioDistance.initdownconvert(sampleRateInHz, numfreq, wavefreqs));\n\n        mylog(\"initialization finished at time: \" + System.currentTimeMillis());\n\n        LineChart lineChart = (LineChart) findViewById(R.id.chart);\n        mChartView = new ChartView(lineChart, \"BP\", Color.BLUE);\n        mChartView.setDescription(\"\");\n        LineChart ppgChart = (LineChart) findViewById(R.id.chart_ppg);\n        mPPGView = new ChartView(ppgChart,\"PPG\",Color.RED);\n        mPPGView.setDescription(\"\");\n\n        ImageAuxiliaries.init(this);\n        updateviews = new Handler(getMainLooper(), new Handler.Callback() {\n            @Override\n            public boolean handleMessage(Message msg)\n            {\n                if(msg.what== 0)\n                {\n                    if(isCalibrated) {\n                        texDistance_x.setText(String.format(\"x=%04.2f\", disx / 20) + \"cm\");\n                        texDistance_y.setText(String.format(\"y=%04.2f\", disy / 20) + \"cm\");\n                        int chart_max,chart_min;\n                        int idisx = ((int)disx / 20);\n                        chart_max = idisx + 1;\n                        chart_min = idisx;\n                        /*\n                        mChartView.setYAxis(chart_max, chart_min,10);\n                        mChartView.addEntry(disx / 20);\n\n                         */\n                    }\n                    else\n                    {\n                        texDistance_x.setText(\"Calibrating...\");\n                        texDistance_y.setText(\"\");\n                    }\n                    mylog(\"count\" + tracecount);\n                    mytrace.setTrace(trace_x, trace_y, tracecount);\n                    tracecount=0;\n                }\n                return false;\n            };\n        });\n        btnPlayRecord.setOnClickListener(new OnClickListener()\n        {\n            @RequiresApi(api = Build.VERSION_CODES.Q)\n            @Override\n            public void onClick(View v)\n            {\n                String currentDate = new SimpleDateFormat(\"MM-dd-HH-mm-ss\", Locale.getDefault()).format(new Date());\n                String fprefix = Objects.requireNonNull(mActivity.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS)).getAbsolutePath()+ File.separator+currentDate;\n                try {\n                    mVLogger = new StringLogger(fprefix+\"-vlog.txt\");\n                    mDLogger = new StringLogger(fprefix+\"-dlog.txt\");\n                    mRecord = new VideoRecord(mActivity);\n                    mArduinoSerial = new ArduinoSerial(\"/dev/ttyUSB0\",fprefix+\"-alog.txt\",115200);\n\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                mRecord.setOnImageWrittenCallback(new VideoRecord.OnImageWritten() {\n                    int i = 0;\n                    @Override\n                    public void callback(Image image,Date date) {\n               //         String s = SystemClock.uptimeMillis()+\"\\n\";\n                        SimpleDateFormat time = new SimpleDateFormat(\"yyyy-MM-dd-HH-mm-ss-SSS\");\n                        String s=time.format(date);\n                        ImageAuxiliaries imgaux = ImageAuxiliaries.getInstance();\n                        double gavg = 0; //gavg is the average of green channel\n                        try {\n                            gavg = imgaux.averageGreen(image);\n                            //Problem occured here\n                            float min = gavg > 10 ? (int) (gavg - 10) : 0;\n                            float max = (float) (gavg + 10);\n                            mPPGView.setYAxis((float)max, (float)min,10);\n                            /*\n                            if (i % 3 == 0)\n                                mPPGView.addEntry(gavg);\n\n                            */\n                            i+=1;\n                            //Problem end\n\n                        } catch (Exception e) {\n                            e.printStackTrace();\n                        }\n\n                        try {\n                            mVLogger.log(gavg+\",\"+s+\"\\n\");\n                        }\n                        catch (IOException e){\n                            e.printStackTrace();\n                        }\n\n\n\n\n                    }\n                });\n                mArduinoSerial.setOnSerialDataAvailable(new ArduinoSerial.onSerialDataAvailable() {\n                    @Override\n                    public void onAvailable(int[] data) {\n                        int ppg = data[2];\n                        return;\n                    }\n                });\n                try {\n                    mRecord.start();\n                } catch (CameraAccessException e) {\n                    e.printStackTrace();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                mArduinoSerial.start();\n                btnPlayRecord.setEnabled(false);\n                btnStopRecord.setEnabled(true);\n\n\n\n\n                playBufSize = AudioTrack.getMinBufferSize(sampleRateInHz,\n                        channelConfig, encodingBitrate);\n\n                recBufSize = AudioRecord.getMinBufferSize(sampleRateInHz,\n                        channelConfig, encodingBitrate);\n                mylog( \"recbuffersize:\" + recBufSize);\n                audioRecord = new AudioRecord(MediaRecorder.AudioSource.MIC,\n                        sampleRateInHz, channelConfig, encodingBitrate, recBufSize);\n\n                if (audioRecord.getState() == AudioRecord.STATE_INITIALIZED) {\n                    mylog(\"Record Initialized\");\n                }\n                mylog(\"channels:\" + audioRecord.getChannelConfiguration());\n\n                new ThreadInstantPlay().start();\n                new ThreadInstantRecord().start();\n            //    new ThreadSocket().start();\n            }\n        });\n        btnStopRecord.setOnClickListener(new OnClickListener()\n        {\n            @Override\n            public void onClick(View v)\n            {\n                btnPlayRecord.setEnabled(true);\n                btnStopRecord.setEnabled(false);\n                blnPlayRecord=false;\n                isCalibrated=false;\n                try{\n                    datastream.close();\n                    datasocket.close();\n                }catch (Exception e) {\n                    //TODOL handle this\n                }\n                mRecord.stop();\n                mArduinoSerial.stop();\n                try {\n                    mVLogger.close();\n                    mDLogger.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n    }\n    private void mylog(String information)\n    {\n        if(logenabled)\n        {\n\n            Log.i(sysname,information);\n        }\n    }\n\n    class ThreadInstantPlay extends Thread\n    {\n        @Override\n        public void run()\n        {\n            SoundPlayer Player= new SoundPlayer(sampleRateInHz,numfreq,wavefreqs);\n            blnPlayRecord=true;\n            Player.play();\n            while (blnPlayRecord==true){}\n            Player.stop();\n        }\n    }\n\n    class ThreadInstantRecord extends Thread {\n\n        //private short [] bsRecord = new short[recBufSize];\n        //\n\n        @Override\n        public void run() {\n            short[] bsRecord = new short[recBufSize * 2];\n            byte[] networkbuf = new byte[recBufSize * 4];\n            int datacount = 0;\n            int curpos = 0;\n            long starttime,endtime;\n            String c_result;\n\n            while (blnPlayRecord == false) {\n            }\n            try {\n                audioRecord.startRecording();\n            }\n            catch (Exception e){\n                String a = e.toString();\n                mylog(e.toString());\n            }\n            /*\n             *\n             */\n            while (blnPlayRecord) {\n                /*\n                 *\n                 */\n                int line = audioRecord.read(bsRecord, 0, frameSize * 2);\n                datacount = datacount + line / 2;\n                now=now+1;\n\n                mylog(\"recevied data:\" + line + \" at time\" + System.currentTimeMillis());\n                if (line >= frameSize) {\n\n                    //get baseband\n\n\n                    starttime=System.currentTimeMillis();\n                    mylog(AudioDistance.getbaseband(bsRecord, baseband, line / 2));\n                    endtime=System.currentTimeMillis();\n\n                    mylog(\"time used forbaseband:\"+(endtime-starttime));\n\n                    starttime=System.currentTimeMillis();\n                    mylog( AudioDistance.removedc(baseband, baseband_nodc, dcvalue));\n                    endtime=System.currentTimeMillis();\n\n                    mylog(\"time used LEVD:\"+(endtime-starttime));\n\n                    starttime=System.currentTimeMillis();\n                    mylog( AudioDistance.getdistance(baseband_nodc, phasechange, dischange, freqpower));\n                    endtime=System.currentTimeMillis();\n\n                    mylog(\"time used distance:\"+(endtime-starttime));\n\n\n                    if(!isCalibrated&&Math.abs(dischange[0])<0.05&&now-lastcalibration>10) {\n\n\n                        c_result=AudioDistance.calibrate(baseband);\n                        mylog(c_result) ;\n                        lastcalibration=now;\n                        if(c_result.equals(\"calibrate OK\")){\n                            isCalibrated=true;\n                        }\n\n                    }\n                    if(isCalibrated) {\n                        starttime = System.currentTimeMillis();\n                        mylog(AudioDistance.getidftdistance(baseband_nodc, idftdis));\n                        endtime = System.currentTimeMillis();\n\n                        mylog(\"time used idftdistance:\" + (endtime - starttime));\n\n                        //keep difference stable;\n\n                        double disdiff,dissum;\n                        disdiff=dischange[0]-dischange[1];\n                        dissum=dischange[0]+dischange[1];\n                        dischangehist=dischangehist*0.5+disdiff*0.5;\n                        dischange[0]=(dissum+dischangehist)/2;\n                        dischange[1]=(dissum-dischangehist)/2;\n\n                        disx=disx+dischange[0];\n                        if(disx>1000)\n                            disx=1000;\n                        if(disx<0)\n                            disx=0;\n                        disy=disy+dischange[1];\n                        if(disy>1000)\n                            disy=1000;\n                        if(disy<0)\n                            disy=0;\n                        if(Math.abs(dischange[0])<0.2&&Math.abs(dischange[1])<0.2&&Math.abs(idftdis[0])>0.1&&Math.abs(idftdis[1])>0.1)\n                        {\n                            disx=disx*(1-distrend)+idftdis[0]*distrend;\n                            disy=disy*(1-distrend)+idftdis[1]*distrend;\n                        }\n                        if(disx<micdis1)\n                            disx=micdis1;\n                        if(disy<micdis2)\n                            disy=micdis2;\n                        if(Math.abs(disx-disy)>(micdis1+micdis2))\n                        {\n                            double tempsum=disx+disy;\n                            if(disx>disy)\n                            {\n                                disx=(tempsum+micdis1+micdis2)/2;\n                                disy=(tempsum-micdis1-micdis2)/2;\n\n                            }\n                            else\n                            {\n                                disx=(tempsum-micdis1-micdis2)/2;\n                                disy=(tempsum+micdis1+micdis2)/2;\n                            }\n                        }\n                        trace_x[tracecount]= (int) Math.round((disy*micdis1*micdis1-disx*micdis2*micdis2+disx*disy*(disy-disx))/2/(disx*micdis2+disy*micdis1));\n                        trace_y[tracecount]=(int) Math.round(Math.sqrt(  Math.abs((disx*disx-micdis1*micdis1)*(disy*disy-micdis2*micdis2)*((micdis1+micdis2)*(micdis1+micdis2)-(disx-disy)*(disx-disy))  )  )/2/(disx*micdis2+disy*micdis1) );\n                        System.out.println(\"x=\"+trace_x[tracecount]+\"y=\"+trace_y[tracecount]);\n                        try {\n                            mDLogger.log(SystemClock.uptimeMillis()+\",\"+\"x:\"+disx+\",y:\"+disy+\"\\n\");\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                        tracecount++;\n\n                    }\n                    if(Math.abs(displaydis-disx)>2||(tracecount>10)) {\n                        Message msg = new Message();\n                        msg.what = 0;\n                        displaydis=disx;\n                        updateviews.sendMessage(msg);\n                    }\n                    if(!isCalibrated)\n                    {\n                        Message msg = new Message();\n                        msg.what = 0;\n                        updateviews.sendMessage(msg);\n                    }\n\n\n\n\n                    curpos = curpos + line / 2;\n                    if (curpos > coscycle)\n                        curpos = curpos - coscycle;\n                    if(sendbaseband&&datastream != null)\n                    {\n                        int j=0;\n                        for (int i = 0; i < 2*numfreq*2*frameSize/cicdec; i++) {\n                            //sum = sum + bsRecord[i];\n                            networkbuf[j++] = (byte) (((short) baseband_nodc[i]) & 0xFF);\n                            networkbuf[j++] = (byte) (((short) baseband_nodc[i]) >> 8);\n                        }\n                        //Log.i(\"wavedemo\", \"data sum:\" + sum);\n\n                        if (datastream != null) {\n                            try {\n                                datastream.write(networkbuf, 0, j);\n                                mylog( \"socket write\" + j);\n                            } catch (Exception e) {\n                                // TODO: handle this\n                                mylog( \"socket error\" + e);\n                            }\n                        }\n\n                    }\n\n                    if (sendDatatoMatlab&&datastream != null) {\n                        int j = 0;\n                        int sum = 0;\n                        for (int i = 0; i < line; i++) {\n                            //sum = sum + bsRecord[i];\n                            networkbuf[j++] = (byte) (bsRecord[i] & 0xFF);\n                            networkbuf[j++] = (byte) (bsRecord[i] >> 8);\n                        }\n                        //Log.i(\"wavedemo\", \"data sum:\" + sum);\n\n                        if (datastream != null) {\n                            try {\n                                datastream.write(networkbuf, 0, j);\n                                mylog( \"socket write\" + j);\n                            } catch (Exception e) {\n                                // TODO: handle this\n                                mylog(\"socket error\" + e);\n                            }\n                        }\n                    }\n                }\n                mylog(\"endtime\" + System.currentTimeMillis());\n\n            }\n            audioRecord.stop();\n\n        }\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/llap_android/MainActivity.java	(revision e4e9387c04740f57526077269268c4536f7be25c)
+++ app/src/main/java/com/example/llap_android/MainActivity.java	(date 1605095186000)
@@ -291,7 +291,6 @@
                 mArduinoSerial.setOnSerialDataAvailable(new ArduinoSerial.onSerialDataAvailable() {
                     @Override
                     public void onAvailable(int[] data) {
-                        int ppg = data[2];
                         return;
                     }
                 });
